"================vimrc==================
"Phil Fishbein

"set space as leader key
let mapleader = "\<Space>"

set nocompatible              " be iMproved, required
filetype off                  " required
filetype plugin indent on

" Vim-Plug
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'altercation/vim-colors-solarized'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'tpope/vim-rails'
Plug 'luochen1990/rainbow'
" Initialize plugin system
call plug#end()

let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle

augroup vimrcEx
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile .{jscs,jshint,eslint}rc set filetype=json
  autocmd BufRead,BufNewFile aliases.local,zshrc.local,*/zsh/configs/* set filetype=sh
  autocmd BufRead,BufNewFile gitconfig.local set filetype=gitconfig
  autocmd BufRead,BufNewFile tmux.conf.local set filetype=tmux
  autocmd BufRead,BufNewFile vimrc.local set filetype=vim
augroup END

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

set background=dark
colorscheme solarized

" Make CtrlP use ag for listing the files. Way faster and no useless files.
let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g ""'
let g:ctrlp_use_caching = 0

"Set up tab preferences
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

nmap 0 ^
nmap <leader>vr :sp $MYVIMRC<cr>
nmap <leader>so :source $MYVIMRC<cr>

" Ctrl+s to exit insert mode and write file
imap jk <esc>:w<cr>
imap kj <esc>:w<cr>

" DIY Autoclosing
inoremap " ""<left>
inoremap ' ''<left>
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

" Ctrl+p for fzf
nmap <C-p> :Files<cr>
nmap <leader>b :Buffers<cr>

set number                      " Display line numbers
set cursorline                  " Highlight current line
hi cursorline cterm=none        " Remove underline from current line
hi cursorlinenr ctermfg=red     " Make line number red
set history=1000                " Remember last 1000 commands

"In insert mode change cursor to line in iTerm 2 on macOS
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" Open new splits to the right and bottom, like most editors
set splitbelow
set splitright

" Kill bad habits
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" split with current directory
nmap <leader>v :vnew <C-r>=escape(expand("%:p:h"), ' ') . '/'<cr>
nmap <leader>s :new <C-r>=escape(expand("%:p:h"), ' ') . '/'<cr>

" Move up and down by visible lines if current line is wrapped
nmap j gj
nmap k gk

" Copy the entire buffer into the system register
nmap <leader>co ggVG*y

" Bind `q` to close the buffer for help files
autocmd Filetype help nnoremap <buffer> q :q<CR>
